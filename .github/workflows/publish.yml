name: Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (e.g. 0.2.3)"
        required: true
        type: string

jobs:
  publish:
    name: Build and publish
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # required to fetch tags

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tools
        run: pip install --upgrade build twine tomli

      - name: Clean dist
        run: rm -rf dist/

      - name: Validate version and tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          TAG="v$VERSION"

          # Check tag exists
          if ! git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "❌ Git tag $TAG does not exist. Please run the version bump workflow first."
            exit 1
          fi

          # Check pyproject.toml version matches
          VERSION_FROM_TOML=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")

          echo "Requested: $VERSION"
          echo "pyproject.toml: $VERSION_FROM_TOML"

          if [ "$VERSION" != "$VERSION_FROM_TOML" ]; then
            echo "❌ Version mismatch between input and pyproject.toml"
            exit 1
          fi

      - name: Build package
        run: python -m build

      - name: Check dist
        run: twine check dist/*

      - name: Upload to PyPI
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/* -u __token__ -p $TWINE_PASSWORD
         
      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ github.event.inputs.version }}"
          name: "Release v${{ github.event.inputs.version }}"
          body: |
            Published version v${{ github.event.inputs.version }} to PyPI.
            - See: https://pypi.org/project/elastic-multiple-scattering/${{ github.event.inputs.version }}/
            - Commit tag: v${{ github.event.inputs.version }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}